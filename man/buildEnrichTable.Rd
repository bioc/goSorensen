% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/buildEnrichTable.R
\name{buildEnrichTable}
\alias{buildEnrichTable}
\alias{buildEnrichTable.default}
\alias{buildEnrichTable.character}
\title{Creates a 2x2 enrichment contingency table from two gene lists}
\usage{
buildEnrichTable(x, ...)

\method{buildEnrichTable}{default}(
  x,
  y,
  listNames = c("gene.list1", "gene.list2"),
  check.table = TRUE,
  geneUniverse,
  orgPackg,
  onto,
  GOLevel,
  restricted = FALSE,
  pAdjustMeth = "BH",
  pvalCutoff = 0.01,
  qvalCutoff = 0.05,
  ...
)

\method{buildEnrichTable}{character}(
  x,
  y,
  listNames = c("gene.list1", "gene.list2"),
  check.table = TRUE,
  geneUniverse,
  orgPackg,
  onto,
  GOLevel,
  restricted = FALSE,
  pAdjustMeth = "BH",
  pvalCutoff = 0.01,
  qvalCutoff = 0.05,
  ...
)
}
\arguments{
\item{x}{an object of class "character" (or coerzable to "character") representing a vector of gene identifiers.}

\item{...}{Additional parameters for internal use (not used for the moment)}

\item{y}{an object of class "character" (or coerzable to "character") representing a vector of gene identifiers.}

\item{listNames}{a character(2) with the gene lists names originating the cross-tabulated enrichment frequencies.}

\item{check.table}{boolean. The resulting table must be checked. Defaults to TRUE.}

\item{geneUniverse}{character vector containing all genes from where geneLists have been extracted.}

\item{orgPackg}{A string with the name of the annotation package.}

\item{onto}{string describing the ontology. Either "BP", "MF" or "CC".}

\item{GOLevel}{An integer, the GO ontology level.}

\item{restricted}{Boolean variable to decide how tabulation of GOIDs is performed. Defaults to FALSE.
See the details section.}

\item{pAdjustMeth}{string describing the adjust method, either "BH", "BY" or "Bonf", defaults to 'BH'.}

\item{pvalCutoff}{A numeric value. Defaults to 0.01.}

\item{qvalCutoff}{A numeric value. Defaults to 0.05.}
}
\value{
an object of class "table" representing a 2x2 contingency table
interpretable as the cross-tabulation of the enriched GO items in two gene lists:
"Number of enriched items in list 1 (TRUE, FALSE)" x "Number of enriched items in
list 2 (TRUE, FALSE)".
}
\description{
Creates a 2x2 enrichment contingency table from two gene lists
}
\details{
Unrestricted tabulation crosses _all_ GO Terms located at the level indicated by `GOLev`
with the two GOIDs lists. Restricted tabulation crosses only terms from the selected GO level
that are _common to ancestor terms of either list_.
That is, if one term in the selected GO level is not an ancestor of at least one of the gene list
most specific GO terms it is excluded from the GO Level's terms because it is impossible that it
appears as being enriched.
}
\section{Methods (by class)}{
\itemize{
\item \code{default}: S3 default method

\item \code{character}: S3 method for class "character"
}}

\examples{
# Gene universe:
data(humanEntrezIDs)
# Gene lists to be explored for enrichment:
data(allOncoGeneLists)
?allOncoGeneLists
# Table of mutual GO node enrichment between gene lists Vogelstein and sanger,
# for ontology MF at GO level 6 (only first 50 genes, to improve speed).
vog.VS.sang <- buildEnrichTable(allOncoGeneLists[["Vogelstein"]][seq.int(1, 50)],
                                allOncoGeneLists[["sanger"]][seq.int(1, 50)],
                                geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
                                onto = "MF", GOLevel = 6, listNames = c("Vogelstein", "sanger"))
vog.VS.sang
# This is an inadequate table for Sorensen-Dice computations:
equivTestSorensen(vog.VS.sang)
# This sometimes happens, due too small gene lists or due to poor incidence
# of enrichment.
#
# In fact, the complete gene lists generate a much interesting contingency table:
# vog.VS.sang <- buildEnrichTable(allOncoGeneLists[["Vogelstein"]],
#                                 allOncoGeneLists[["sanger"]],
#                                 geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
#                                 onto = "MF", GOLevel = 6, listNames = c("Vogelstein", "sanger"))
# vog.VS.sang
# equivTestSorensen(vog.VS.sang)
}
