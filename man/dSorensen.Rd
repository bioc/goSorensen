% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsorensen.R
\name{dSorensen}
\alias{dSorensen}
\alias{dSorensen.table}
\alias{dSorensen.matrix}
\alias{dSorensen.numeric}
\alias{dSorensen.character}
\alias{dSorensen.list}
\title{Computation of the Sorensen-Dice dissimilarity}
\usage{
dSorensen(x, ...)

\method{dSorensen}{table}(x, check.table = TRUE)

\method{dSorensen}{matrix}(x, check.table = TRUE)

\method{dSorensen}{numeric}(x, check.table = TRUE)

\method{dSorensen}{character}(x, y, listNames = c("gene.list1", "gene.list2"), ...)

\method{dSorensen}{list}(x, ...)
}
\arguments{
\item{x}{either an object of class "table", "matrix" or "numeric" representing a 2x2 contingency table,
or a "character" (a set of gene identifiers) or "list" object. See the details section for more information.}

\item{...}{extra parameters for function \code{crossTabGOIDs4GeneLists} in package \code{equivStandardTest}.}

\item{check.table}{Boolean. If TRUE (default), argument \code{x} is checked to adequately
represent a 2x2 contingency table, by means of function \code{nice2x2Table}  (only in the "table", "matrix"
or "numeric" interfaces).}

\item{y}{an object of class "character" representing a vector of gene identifiers.}
}
\value{
In the "table", "matrix", "numeric" and "character" interfaces, the value of the Sorensen-Dice
dissimilarity. In the "list" interface, the symmetric matrix of all pairwise dissimilarities.
}
\description{
Computation of the Sorensen-Dice dissimilarity
}
\details{
Given a 2x2 arrangement of frequencies (either implemented as a "table", a "matrix"
or a "numeric" object):
\deqn{
 \tabular{rr}{
  n_{00} \tab n_{01} \cr
  n_{10} \tab n_{11},
 }
}{}

\tabular{rr}{
n_00 \tab n_01 \cr
n_10 \tab n_11,
}

this function computes the Sorensen-Dice dissimilarity
\deqn{\frac{n_{10} + n_{01}}{2 n_{11} + n_{10} + n_{01}}.}{{%
n_10 + n_01}/{2 n_11 + n_10 + n_01}.}

The subindex '00' corresponds to those GO items
non enriched in both gene lists, '10' to items enriched in the first list but not in the second,
'01' to items non enriched in the first list but enriched in the second one and '11' to those
GO items enriched in both lists. These values must be provided in this order.

In the "numeric" interface,
if \code{length(x) == 3} the values are interpreted as
\eqn{(n_{10}, n_{01}, n_{11})}{%
(n_10, n_01, n_11)} and otherwise
as \eqn{(n_{00}, n_{10}, n_{01}, n_{11})}{%
(n_00, n_10, n_01, n_11)}, discarding extra values if necessary.

The result is correct, regardless the frequencies are absolute or relative.

If \code{x} is an object of class "character", it must represent a list of gene identifiers. Then the
dissimilarity between lists \code{x} and \code{y} is computed, after summarizing these gene lists
as a 2x2 contingency table of joint enrichment.

In the "list" interface, the argument must be a list of "character" vectors, each one
representing a gene list (character identifiers). Then, all pairwise dissimilarities between these
gene lists are computed.
}
\section{Methods (by class)}{
\itemize{
\item \code{table}: S3 method for class "table"

\item \code{matrix}: S3 method for class "matrix"

\item \code{numeric}: S3 method for class "numeric"

\item \code{character}: S3 method for class "character"

\item \code{list}: S3 method for class "list"
}}

\examples{
# Gene lists 'atlas' and 'sanger' in 'Cangenes' dataset. Table of joint enrichment
# of GO items in ontology BP at level 3.
?tab_atlas.sanger_BP3
dSorensen(tab_atlas.sanger_BP3)

# Badly formed table:
conti <- as.table(matrix(c(501, 27, 36, 12, 43, 15, 0, 0, 0),
                         nrow = 3, ncol = 3,
                         dimnames = list(c("a1","a2","a3"),
                                         c("b1", "b2","b3"))))
dSorensen(conti)
dSorensen(conti, check.table = FALSE)
# Wrong value!
# Correct:
dSorensen(nice2x2Table(conti), check.table = FALSE)
conti2 <- conti[1,1:min(2,ncol(conti)), drop = FALSE]
dSorensen(conti2)
dSorensen(matrix(c(210, 12), ncol = 2, nrow = 1))
conti4 <- c(1439, 32, 21, 81)
dSorensen(conti4)
# This function is also appropriate for proportions:
dSorensen(conti4 / sum(conti4))
dSorensen(matrix(conti4, nrow = 2))
conti5 <- c(32, 21, 81)
dSorensen(conti5)

library(equivStandardTest)
data(humanEntrezIDs)

?pbtGeneLists
# (Time consuming:)
dSorensen(pbtGeneLists[[2]], pbtGeneLists[[4]],
          listNames = names(pbtGeneLists)[c(2,4)],
          onto = "BP", GOLevel = 5,
          geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db")
# Essentially, the above code makes the same as:
pbtBP5.IRITD3vsKT1 <- nice2x2Table(
  crossTabGOIDs4GeneLists(pbtGeneLists[[2]], pbtGeneLists[[4]],
                          onto = "BP", GOLevel = 5,
                          geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db"),
  listNames = names(pbtGeneLists)[c(2,4)])
dSorensen(pbtBP5.IRITD3vsKT1)
# (Quite time consuming:)
dSorensen(pbtGeneLists,
          onto = "BP", GOLevel = 5,
          geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db")
}
\seealso{
\code{\link{nice2x2Table}} for checking and reformatting data,
\code{\link{seSorensen}} for computing the standard error of the dissimilarity,
\code{\link{duppSorensen}} for the upper limit of a one-sided confidence interval
of the dissimilarity, \code{\link{equivTestSorensen}} for an equivalence test.
}
