% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getNboot.R
\name{getNboot}
\alias{getNboot}
\alias{getNboot.equivSDhtest}
\alias{getNboot.equivSDhtestList}
\alias{getNboot.AllEquivSDhtest}
\title{Access to the effective number of bootstrap replicates in one or more equivalence test
results (only in their bootstrap version)}
\usage{
getNboot(x, ...)

\method{getNboot}{equivSDhtest}(x, ...)

\method{getNboot}{equivSDhtestList}(x, simplify = TRUE, ...)

\method{getNboot}{AllEquivSDhtest}(x, onto, GOLevel, listNames, simplify = TRUE, ...)
}
\arguments{
\item{x}{an object of class "equivSDhtest" or "equivSDhtestList" or "allEquivSDtest".}

\item{...}{Additional parameters.}

\item{simplify}{logical, if TRUE the result is simplified, e.g., returning a vector instead
of a matrix.}

\item{onto}{character, a vector with one or more of "BP", "CC" or "MF", ontologies to access.}

\item{GOLevel}{numeric, a vector with one or more GO levels to access.}

\item{listNames}{character(2), the names of a pair of gene lists.}
}
\value{
A numeric value, the number of effective bootstrap replicates.
}
\description{
Given objects representing the result(s) of one or more equivalence tests
(classes "equivSDhtest", "equivSDhtestList" or "allEquivSDtest", i.e., the
result of functions 'equivTestSorensen' and 'allEquivTestSorensen' with the parameter
boot = TRUE, otherwise it returns a NA value), this function returns the number of
effective bootstrap replicates.
}
\section{Methods (by class)}{
\itemize{
\item \code{equivSDhtest}: S3 method for class "equivSDhtest"

\item \code{equivSDhtestList}: S3 method for class "equivSDhtestList"

\item \code{AllEquivSDhtest}: S3 method for class "AllEquivSDhtest"
}}

\examples{
# Dataset 'allOncoGeneLists' contains the result of the equivalence test between gene lists
# 'waldman' and 'atlas', at level 4 of the BP ontology:
waldman_atlas.BP.4
class(waldman_atlas.BP.4)
# This may correspond to the result of code like:
# waldman_atlas.BP.4 <- equivTestSorensen(
#   allOncoGeneLists[["waldman"]], allOncoGeneLists[["atlas"]],
#   geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
#   onto = "BP", GOLevel = 4, listNames = c("waldman", "atlas"))
#
# (But results may vary according to GO updating)

# Not a bootstrap test, first upgrade to a bootstrap test:
boot.waldman_atlas.BP.4 <- upgrade(waldman_atlas.BP.4, boot = TRUE)

getNboot(waldman_atlas.BP.4)
getNboot(boot.waldman_atlas.BP.4)

getDissimilarity(waldman_atlas.BP.4)
getSE(waldman_atlas.BP.4)
getTable(waldman_atlas.BP.4)
getUpper(waldman_atlas.BP.4)
getDissimilarity(boot.waldman_atlas.BP.4)
getSE(boot.waldman_atlas.BP.4)
getTable(boot.waldman_atlas.BP.4)
getUpper(boot.waldman_atlas.BP.4)


# All pairwise equivalence tests at level 4 of the BP ontology
BP.4
class(BP.4)
# This may correspond to a call like:
# BP.4 <- equivTestSorensen(allOncoGeneLists,
#                           geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
#                           onto = "BP", GOLevel = 4)
boot.BP.4 <- upgrade(BP.4, boot = TRUE)
getNboot(BP.4)
getNboot(boot.BP.4)
getNboot(boot.BP.4, simplify = FALSE)

# Equivalence test iterated over all GO ontologies and levels 3 to 10.
cancerEquivSorensen
class(cancerEquivSorensen)
# This may correspond to code like:
# (By default, the tests are iterated over all GO ontologies and for levels 3 to 10)
# cancerEquivSorensen <- allEquivTestSorensen(allOncoGeneLists,
#                                             geneUniverse = humanEntrezIDs,
#                                             orgPackg = "org.Hs.eg.db")
boot.cancerEquivSorensen <- upgrade(cancerEquivSorensen, boot = TRUE)

getNboot(cancerEquivSorensen)
getNboot(boot.cancerEquivSorensen)
getNboot(boot.cancerEquivSorensen, simplify = FALSE)
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6")
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6", simplify = FALSE)
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6", onto = "BP", simplify = FALSE)
getNboot(boot.cancerEquivSorensen, GOLevel = "level 6", onto = "BP",
         listNames = c("waldman", "sanger"))
getNboot(boot.cancerEquivSorensen$BP$`level 4`)

}
