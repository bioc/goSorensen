% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gets.R
\name{getTable}
\alias{getTable}
\alias{getTable.equivSDhtest}
\alias{getTable.equivSDhtestList}
\alias{getTable.AllEquivSDhtest}
\title{Access to specific fields of an equivalence test result}
\usage{
getTable(x, ...)

\method{getTable}{equivSDhtest}(x)

\method{getTable}{equivSDhtestList}(x)

\method{getTable}{AllEquivSDhtest}(x, onto, GOLevel, listNames)
}
\arguments{
\item{x}{an object of class "equivSDhtest" or "equivSDhtestList" or "allEquivSDtest".}

\item{onto}{character, a vector with one or more of "BP", "CC" or "MF", ontologies to access.}

\item{GOLevel}{numeric, a vector with one or more GO levels to access.}

\item{listNames}{character(2), the names of a pair of gene lists.}

\item{simplify}{logical, if TRUE the result is simplified, e.g., returning a vector instead
of a matrix.}
}
\description{
Accessor functions to specific fields of objects of classes "equivSDhtest", "equivSDhtestList"
or "allEquivSDtest", i.e., to the result of functions 'equivTestSorensen' and 'allEquivTestSorensen'.
}
\section{Methods (by class)}{
\itemize{
\item \code{equivSDhtest}: S3 method for class "equivSDhtest"

\item \code{equivSDhtestList}: S3 method for class "equivSDhtestList"

\item \code{AllEquivSDhtest}: S3 method for class "AllEquivSDhtest"
}}

\examples{
# Result of the equivalence test between gene lists 'waldman' and 'atlas', in dataset
# 'allOncoGeneLists', at level 4 of the BP ontology:
waldman_atlas.BP.4
class(waldman_atlas.BP.4)
# This may correspond to the result of code like:
# waldman_atlas.BP.4 <- equivTestSorensen(
#   allOncoGeneLists[["waldman"]], allOncoGeneLists[["atlas"]],
#   geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
#   onto = "BP", GOLevel = 4, listNames = c("waldman", "atlas"))
getPvalue(waldman_atlas.BP.4)
getDissimilarity(waldman_atlas.BP.4)
getUpper(waldman_atlas.BP.4)
getSE(waldman_atlas.BP.4)
getTable(waldman_atlas.BP.4)

# All pairwise equivalence tests at level 4 of the BP ontology
BP.4
class(BP.4)
# This may correspond to a call like:
# BP.4 <- equivTestSorensen(allOncoGeneLists,
#                           geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db",
#                           onto = "BP", GOLevel = 4)
getPvalue(BP.4)
getPvalue(BP.4, simplify = FALSE)
getDissimilarity(BP.4)
getDissimilarity(BP.4, simplify = FALSE)
getUpper(BP.4)
getUpper(BP.4, simplify = FALSE)
getSE(BP.4)
getSE(BP.4, simplify = FALSE)
getTable(BP.4)

# Equivalence test iteradted over all GO ontologies and levels 3 to 10.
cancerEquivSorensen
class(cancerEquivSorensen)
# This may correspond to code like:
# (By default, the tests are iterated over all GO ontologies and for levels 3 to 10)
# cancerEquivSorensen <- allEquivTestSorensen(allOncoGeneLists,
#                                             geneUniverse = humanEntrezIDs,
#                                             orgPackg = "org.Hs.eg.db")
# 2x2 contingecy tables of joint enrichment:
getTable(cancerEquivSorensen)
getTable(cancerEquivSorensen, GOLevel = "level 6")
getTable(cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getTable(cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getTable(cancerEquivSorensen, GOLevel = "level 6", onto = "BP",
         listNames = c("waldman", "sanger"))

# p-values:
getPvalue(cancerEquivSorensen)
getPvalue(cancerEquivSorensen, simplify = FALSE)
getPvalue(cancerEquivSorensen, GOLevel = "level 6")
getPvalue(cancerEquivSorensen, GOLevel = "level 6", simplify = FALSE)
getPvalue(cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getPvalue(cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getPvalue(cancerEquivSorensen, GOLevel = "level 6", onto = "BP", simplify = FALSE)
getPvalue(cancerEquivSorensen, GOLevel = "level 6", onto = "BP",
          listNames = c("waldman", "sanger"))
getPvalue(cancerEquivSorensen$BP$`level 4`)

# Estimated Sorensen-Dice dissimilarity:
getDissimilarity(cancerEquivSorensen)
getDissimilarity(cancerEquivSorensen, simplify = FALSE)
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6")
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6", simplify = FALSE)
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6", onto = "BP", simplify = FALSE)
getDissimilarity(cancerEquivSorensen, GOLevel = "level 6", onto = "BP",
                 listNames = c("waldman", "sanger"))
getDissimilarity(cancerEquivSorensen$BP$`level 4`)

# Upper confidence limits for the Sorensen-Dice dissimilarity:
getUpper(cancerEquivSorensen)
getUpper(cancerEquivSorensen, simplify = FALSE)
getUpper(cancerEquivSorensen, GOLevel = "level 6")
getUpper(cancerEquivSorensen, GOLevel = "level 6", simplify = FALSE)
getUpper(cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getUpper(cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getUpper(cancerEquivSorensen, GOLevel = "level 6", onto = "BP", simplify = FALSE)
getUpper(cancerEquivSorensen, GOLevel = "level 6", onto = "BP",
         listNames = c("waldman", "sanger"))
getUpper(cancerEquivSorensen$BP$`level 4`)

# Standard error of the Sorensen-Dice dissimilarity estimate:
getSE(cancerEquivSorensen)
getSE(cancerEquivSorensen, simplify = FALSE)
getSE(cancerEquivSorensen, GOLevel = "level 6")
getSE(cancerEquivSorensen, GOLevel = "level 6", simplify = FALSE)
getSE(cancerEquivSorensen, GOLevel = "level 6", listNames = c("waldman", "sanger"))
getSE(cancerEquivSorensen, GOLevel = "level 6", onto = "BP")
getSE(cancerEquivSorensen, GOLevel = "level 6", onto = "BP", simplify = FALSE)
getSE(cancerEquivSorensen, GOLevel = "level 6", onto = "BP", listNames = c("waldman", "sanger"))
getSE(cancerEquivSorensen$BP$`level 4`)


# Acces to Sorensen-Dice asymptotic test enrichment 2x2 contingency table

}
