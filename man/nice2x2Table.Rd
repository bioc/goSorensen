% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/nice2x2Table.R
\name{nice2x2Table}
\alias{nice2x2Table}
\alias{nice2x2Table.table}
\alias{nice2x2Table.matrix}
\alias{nice2x2Table.numeric}
\title{Checks for validity data representing an enrichment contingency table and tries to put it
in an adequate format, if needed}
\usage{
nice2x2Table(x, ...)

\method{nice2x2Table}{table}(x, listNames)

\method{nice2x2Table}{matrix}(x, listNames)

\method{nice2x2Table}{numeric}(x, n)
}
\arguments{
\item{x}{either an object of class "table", "matrix" or "numeric".}

\item{listNames}{a character(2) object containing the names of the gene lists
which have originated the cross-tabulated enrichment frequencies. Ignore it to
let unchanged the original names (if any) in argument \code{x}.}

\item{n}{total number of cases (GO nodes) in the contingency table. Only required
(sometimes) on the "numeric" interface, see the details section.}
}
\value{
either an object of the same class than the input \code{x}
(i.e., "table", "matrix" or "numeric") nicely representing a 2x2 contingency table
interpretable as the cross-tabulation of the enriched GO items in two gene lists:
"Number of enriched items in list 1 (FALSE, TRUE)" x "Number of enriched items in
list 2 (FALSE, TRUE)".
}
\description{
Checks for validity data representing an enrichment contingency table and tries to put it
in an adequate format, if needed
}
\details{
In the "table" and "matrix" interfaces, the input parameter \code{x} must correspond
to a two-dimensional array. It is trimmed if one or both dimensions exceed 2 (and a
warning is issued) and, conversely, it is filled with zeros in order to complete
a 2x2 table, if required. This 2x2 table is finally returned.
In the "numeric" interface, the input \code{x} must correspond to a numeric of length
3 or 4. In the first case (length 3), it is interpreted as the frequencies of:
"enriched in the first gene list and not in the second gene list",
"not enriched in the first list and enriched in the second" and
"enriched in both lists", in this order. Then it is completed to be a numeric of length
4, adding at its first position the frequency of "not enriched in both lists", as
\code{n - sum(x)}. Otherwise the parameter \code{n} is ignored. This method always returns
a length 4 numeric.
}
\section{Methods (by class)}{
\itemize{
\item \code{table}: S3 method for class "table"

\item \code{matrix}: S3 method for class "matrix"

\item \code{numeric}: S3 method for class "numeric"
}}

\examples{
conti <- as.table(matrix(c(501, 27, 36, 12, 43, 15, 0, 0, 0),
nrow = 3, ncol = 3,
dimnames = list(c("a1","a2","a3"),
                c("b1", "b2","b3"))))
nice2x2Table(conti)
nice2x2Table(conti, listNames = c("a gene list","another"))
conti2 <- conti[1,1:min(2,ncol(conti)), drop = FALSE]
conti2
nice2x2Table(conti2)
nice2x2Table(conti2, listNames = c("a gene list","another"))

conti3 <- matrix(c(210, 12), ncol = 2, nrow = 1)
conti3
nice2x2Table(conti3)

conti4 <- c(1439, 32, 21, 81)
nice2x2Table(conti4)
conti4.mat <- matrix(conti4, nrow = 2)
conti4.mat
conti5 <- c(32, 21, 81)
nice2x2Table(conti5, n = 1573)
nice2x2Table(conti5, n = 1000)
try(nice2x2Table(conti5, n = 10))

# Building enrichment contingency tables from scratch, using package "equivStandardTest"
library(equivStandardTest)
# Gene universe:
data(humanEntrezIDs)
# Gene lists to be explored for enrichment:
data(kidneyGeneLists)
# Incomplete 2x2 table due to zero frequencies (no annotated items for list IRITD5):
IRITD3VS5.MF7 <- crossTabGOIDs4GeneLists(kidneyGeneLists[["IRITD3"]], kidneyGeneLists[["IRITD5"]],
  geneUniverse = humanEntrezIDs, orgPackg = "org.Hs.eg.db", onto = "MF", GOLevel = 7)
IRITD3VS5.MF7
# Complete as a 2x2 table:
IRITD3VS5.MF7 <- nice2x2Table(IRITD3VS5.MF7, c("IRITD3", "IRITD5"))
IRITD3VS5.MF7

}
